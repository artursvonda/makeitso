interface Node {
    id: ID!
}

interface Connection {
    edges: [Edge]
    pageInfo: PageInfo!
}

interface Edge {
    cursor: String!
    node: Node
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type Query {
    viewer: User
    node(id: ID!): Node
}

type Mutation {
    addTask(task: AddTaskInput!): AddTaskPayload!
}

type AddTaskPayload {
    task: TaskEdge
}

type User implements Node {
    id: ID!
    lists(first: Int!): ListConnection
}

type ListConnection implements Connection {
    edges: [ListEdge]
    pageInfo: PageInfo!
}

type ListEdge implements Edge {
    cursor: String!
    node: List
}

"""
List ow tasks
"""
type List implements Node {
    id: ID!
    name: String!
    tasks(first: Int!): TaskConnection
}

type TaskConnection implements Connection {
    edges: [TaskEdge]
    pageInfo: PageInfo!
}

type TaskEdge implements Edge {
    cursor: String!
    node: Task
}

"""
Task
"""
type Task implements Node {
    id: ID!
    name: String!
    done: Boolean!
}

input AddTaskInput {
    name: String!
}
